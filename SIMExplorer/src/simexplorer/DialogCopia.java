/*
 * The MIT License
 *
 * Copyright 2018 Gustavo Rabelo <gustavo.vrr@gmail.com>.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package simexplorer;

import java.io.File;
import javax.swing.text.BadLocationException;
import simexplorer.apdusender.APDUSender;
import simexplorer.simcardcloner.SIMCardCloner;
import simexplorer.simcardcloner.SIMCardClonerListener;
import simexplorer.simcardcloner.SIMCardType;

/**
 *
 * @author Gustavo Rabelo <gustavo.vrr@gmail.com>
 */
public class DialogCopia extends javax.swing.JDialog implements SIMCardClonerListener {

    
    StringBuilder log = new StringBuilder();
    
    /**
     * Creates new form DialogCopia
     */
    public DialogCopia(java.awt.Frame parent, File file, APDUSender apduSender, boolean simToFile, SIMCardType simCardType) {
        super(parent, true);
        initComponents();
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        
                
        if(simToFile)        
            (new SIMCardCloner()).simCardToFile(file, this, apduSender);
        else
            (new SIMCardCloner()).fileToSIMCard(file, this, apduSender, simCardType);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        btnFechar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Copy");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        txtLog.setColumns(20);
        txtLog.setRows(5);
        jScrollPane1.setViewportView(txtLog);

        btnFechar.setText("Close");
        btnFechar.setEnabled(false);
        btnFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 887, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnFechar)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnFechar)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
    }//GEN-LAST:event_formWindowOpened

    private void btnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharActionPerformed
        
        this.setVisible(false);
        
    }//GEN-LAST:event_btnFecharActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFechar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtLog;
    // End of variables declaration//GEN-END:variables

    @Override
    public void simCardClonerEvent(String evt) {
        log.append("\n").append(evt);
        txtLog.setText(log.toString());
        try {
            txtLog.setCaretPosition(txtLog.getLineStartOffset(txtLog.getLineCount() - 1));
        } catch (BadLocationException ex) {
        }
    }

    @Override
    public void simCardClonerInit() {
        log.append("Start");
        txtLog.setText(log.toString());
        try {
            txtLog.setCaretPosition(txtLog.getLineStartOffset(txtLog.getLineCount() - 1));
        } catch (BadLocationException ex) {
        }
    }

    @Override
    public void simCardClonerEnd(boolean success) {
        log.append("\n").append(success?"End!":"Fail");
        txtLog.setText(log.toString());
        try {
            txtLog.setCaretPosition(txtLog.getLineStartOffset(txtLog.getLineCount() - 1));
        } catch (BadLocationException ex) {
        }
        
        btnFechar.setEnabled(true);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
    }
}
